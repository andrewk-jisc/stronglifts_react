// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Exercise {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?
  Set         Set[]
  Weight      Weight[]

  @@map("exercises") // Maps to "exercises" table in PostgreSQL
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(50)
  email        String    @unique @db.VarChar(100)
  passwordHash String
  createdAt    DateTime  @default(now())
  lastLogin    DateTime?
  Workout      Workout[]
  Weight       Weight[]

  @@map("users")
}

model Workout {
  id          Int      @id @default(autoincrement())
  userId      Int
  workoutDate DateTime
  workoutType String   @db.Char(1)
  createdAt   DateTime @default(now())

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Set  Set[]

  @@map("workouts")
}

model Set {
  id         Int      @id @default(autoincrement())
  workoutId  Int
  exerciseId Int
  setNumber  Int
  weight     Decimal  @db.Decimal(5, 2)
  reps       Int
  createdAt  DateTime @default(now())

  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@map("sets")
}

model Weight {
  id           Int      @id @default(autoincrement())
  userId       Int
  exerciseId   Int
  weight       Decimal  @db.Decimal(5, 2)
  dateRecorded DateTime @default(dbgenerated("CURRENT_DATE"))
  isDeload     Boolean  @default(false)
  createdAt    DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@map("weights")
}